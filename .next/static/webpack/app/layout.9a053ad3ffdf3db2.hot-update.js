"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/layout",{

/***/ "(app-pages-browser)/./app/globals.css":
/*!*************************!*\
  !*** ./app/globals.css ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"46e18ff7915e\");\nif (true) { module.hot.accept() }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2FwcC9nbG9iYWxzLmNzcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWUsY0FBYztBQUM3QixJQUFJLElBQVUsSUFBSSxpQkFBaUIiLCJzb3VyY2VzIjpbIi9hcHAvYXBwL2dsb2JhbHMuY3NzIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiNDZlMThmZjc5MTVlXCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/globals.css\n"));

/***/ }),

/***/ "(app-pages-browser)/./components/web3-provider.tsx":
/*!**************************************!*\
  !*** ./components/web3-provider.tsx ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Web3Context: () => (/* binding */ Web3Context),\n/* harmony export */   Web3Provider: () => (/* binding */ Web3Provider)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@15.2.4_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ethers */ \"(app-pages-browser)/./node_modules/.pnpm/ethers@6.14.0/node_modules/ethers/lib.esm/providers/provider-browser.js\");\n/* harmony import */ var _hooks_use_toast__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/hooks/use-toast */ \"(app-pages-browser)/./hooks/use-toast.ts\");\n/* __next_internal_client_entry_do_not_use__ Web3Context,Web3Provider auto */ \nvar _s = $RefreshSig$();\n\n\n\nconst Web3Context = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    address: null,\n    isConnected: false,\n    connect: async ()=>\"\",\n    disconnect: ()=>{},\n    signMessage: async ()=>\"\",\n    chainId: null,\n    switchChain: async ()=>false,\n    walletType: null\n});\nfunction Web3Provider(param) {\n    let { children } = param;\n    _s();\n    const [address, setAddress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isConnected, setIsConnected] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [provider, setProvider] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [chainId, setChainId] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [walletType, setWalletType] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const { toast } = (0,_hooks_use_toast__WEBPACK_IMPORTED_MODULE_2__.useToast)();\n    // Handle account and chain changes\n    const handleAccountsChanged = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Web3Provider.useCallback[handleAccountsChanged]\": (accounts)=>{\n            if (accounts.length === 0) {\n                // User disconnected their wallet\n                disconnect();\n            } else if (accounts[0] !== address) {\n                // Account changed\n                setAddress(accounts[0]);\n                localStorage.setItem(\"walletAddress\", accounts[0]);\n                toast({\n                    title: \"Wallet Changed\",\n                    description: \"Connected to \".concat(accounts[0].slice(0, 6), \"...\").concat(accounts[0].slice(-4))\n                });\n            }\n        }\n    }[\"Web3Provider.useCallback[handleAccountsChanged]\"], [\n        address\n    ]);\n    const handleChainChanged = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Web3Provider.useCallback[handleChainChanged]\": (chainIdHex)=>{\n            const newChainId = parseInt(chainIdHex, 16);\n            setChainId(newChainId);\n            toast({\n                title: \"Network Changed\",\n                description: \"Switched to chain ID: \".concat(newChainId)\n            });\n            // Refresh the page to make sure everything is updated properly\n            window.location.reload();\n        }\n    }[\"Web3Provider.useCallback[handleChainChanged]\"], []);\n    const handleDisconnect = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Web3Provider.useCallback[handleDisconnect]\": ()=>{\n            disconnect();\n            toast({\n                title: \"Wallet Disconnected\",\n                description: \"Your wallet has been disconnected\"\n            });\n        }\n    }[\"Web3Provider.useCallback[handleDisconnect]\"], []);\n    // Initialize event listeners for wallet\n    const setupEventListeners = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"Web3Provider.useCallback[setupEventListeners]\": ()=>{\n            if ( true && window.ethereum) {\n                // Remove any existing listeners\n                window.ethereum.removeAllListeners(\"accountsChanged\");\n                window.ethereum.removeAllListeners(\"chainChanged\");\n                window.ethereum.removeAllListeners(\"disconnect\");\n                // Add new listeners\n                window.ethereum.on(\"accountsChanged\", handleAccountsChanged);\n                window.ethereum.on(\"chainChanged\", handleChainChanged);\n                window.ethereum.on(\"disconnect\", handleDisconnect);\n                // Get current chain ID\n                window.ethereum.request({\n                    method: \"eth_chainId\"\n                }).then({\n                    \"Web3Provider.useCallback[setupEventListeners]\": (chainIdHex)=>{\n                        setChainId(parseInt(chainIdHex, 16));\n                    }\n                }[\"Web3Provider.useCallback[setupEventListeners]\"]).catch(console.error);\n            }\n        }\n    }[\"Web3Provider.useCallback[setupEventListeners]\"], [\n        handleAccountsChanged,\n        handleChainChanged,\n        handleDisconnect\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"Web3Provider.useEffect\": ()=>{\n            // Check if user was previously connected\n            const wasConnected = localStorage.getItem(\"walletConnected\") === \"true\";\n            const savedAddress = localStorage.getItem(\"walletAddress\");\n            const savedWalletType = localStorage.getItem(\"walletType\");\n            if (wasConnected && savedAddress) {\n                setAddress(savedAddress);\n                setIsConnected(true);\n                setWalletType(savedWalletType);\n                // Initialize provider if window.ethereum is available\n                if ( true && window.ethereum) {\n                    const ethersProvider = new ethers__WEBPACK_IMPORTED_MODULE_3__.BrowserProvider(window.ethereum);\n                    setProvider(ethersProvider);\n                    setupEventListeners();\n                }\n            }\n            // Cleanup event listeners\n            return ({\n                \"Web3Provider.useEffect\": ()=>{\n                    if ( true && window.ethereum) {\n                        window.ethereum.removeAllListeners(\"accountsChanged\");\n                        window.ethereum.removeAllListeners(\"chainChanged\");\n                        window.ethereum.removeAllListeners(\"disconnect\");\n                    }\n                }\n            })[\"Web3Provider.useEffect\"];\n        }\n    }[\"Web3Provider.useEffect\"], [\n        setupEventListeners\n    ]);\n    const connect = async function() {\n        let walletType = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 'metamask';\n        try {\n            // Check if MetaMask is installed for MetaMask option\n            if (walletType === 'metamask' && \"object\" !== \"undefined\" && window.ethereum) {\n                // Create a new provider\n                const ethersProvider = new ethers__WEBPACK_IMPORTED_MODULE_3__.BrowserProvider(window.ethereum);\n                setProvider(ethersProvider);\n                // Request account access\n                const accounts = await ethersProvider.send(\"eth_requestAccounts\", []);\n                const connectedAddress = accounts[0];\n                // Get current chain ID\n                const chainIdHex = await window.ethereum.request({\n                    method: \"eth_chainId\"\n                });\n                setChainId(parseInt(chainIdHex, 16));\n                // Setup event listeners\n                setupEventListeners();\n                // Update state\n                setAddress(connectedAddress);\n                setIsConnected(true);\n                setWalletType('metamask');\n                // Save to localStorage\n                localStorage.setItem(\"walletConnected\", \"true\");\n                localStorage.setItem(\"walletAddress\", connectedAddress);\n                localStorage.setItem(\"walletType\", 'metamask');\n                toast({\n                    title: \"Wallet Connected\",\n                    description: \"Connected to MetaMask: \".concat(connectedAddress.slice(0, 6), \"...\").concat(connectedAddress.slice(-4))\n                });\n                return connectedAddress;\n            }\n            // For WalletConnect and other wallets, in a real implementation you would:\n            // 1. Import WalletConnect SDK\n            // 2. Initialize a provider\n            // 3. Connect with the appropriate provider\n            // Mock implementation for development\n            console.log(\"Mock connection to \".concat(walletType));\n            const mockAddress = \"0x\" + Math.random().toString(16).slice(2, 42);\n            setAddress(mockAddress);\n            setIsConnected(true);\n            setWalletType(walletType);\n            setChainId(1) // Mock Ethereum mainnet\n            ;\n            // Save to localStorage\n            localStorage.setItem(\"walletConnected\", \"true\");\n            localStorage.setItem(\"walletAddress\", mockAddress);\n            localStorage.setItem(\"walletType\", walletType);\n            toast({\n                title: \"Wallet Connected\",\n                description: \"Connected to \".concat(walletType, \": \").concat(mockAddress.slice(0, 6), \"...\").concat(mockAddress.slice(-4))\n            });\n            return mockAddress;\n        } catch (error) {\n            console.error(\"Connection error:\", error);\n            toast({\n                title: \"Connection Failed\",\n                description: (error === null || error === void 0 ? void 0 : error.message) || \"Could not connect to wallet\",\n                variant: \"destructive\"\n            });\n            throw error;\n        }\n    };\n    const disconnect = ()=>{\n        setAddress(null);\n        setIsConnected(false);\n        setProvider(null);\n        setChainId(null);\n        setWalletType(null);\n        // Clear localStorage\n        localStorage.removeItem(\"walletConnected\");\n        localStorage.removeItem(\"walletAddress\");\n        localStorage.removeItem(\"walletType\");\n        localStorage.removeItem(\"auth_token\");\n        localStorage.removeItem(\"auth_user\");\n    };\n    const signMessage = async (message)=>{\n        try {\n            if (!isConnected || !address) {\n                throw new Error(\"Wallet not connected\");\n            }\n            // If we have a real provider, use it to sign\n            if (provider) {\n                const signer = await provider.getSigner();\n                return await signer.signMessage(message);\n            }\n            // Mock implementation for development\n            console.log(\"Mock signing message:\", message);\n            return \"0x\".concat(Array.from({\n                length: 130\n            }, ()=>Math.floor(Math.random() * 16).toString(16)).join(\"\"));\n        } catch (error) {\n            console.error(\"Signing error:\", error);\n            toast({\n                title: \"Signing Failed\",\n                description: (error === null || error === void 0 ? void 0 : error.message) || \"Could not sign message\",\n                variant: \"destructive\"\n            });\n            throw error;\n        }\n    };\n    const switchChain = async (targetChainId)=>{\n        try {\n            if (!isConnected || !provider) {\n                throw new Error(\"Wallet not connected\");\n            }\n            // For MetaMask\n            if ( true && window.ethereum) {\n                const chainIdHex = \"0x\".concat(targetChainId.toString(16));\n                // Try to switch to the chain\n                try {\n                    await window.ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [\n                            {\n                                chainId: chainIdHex\n                            }\n                        ]\n                    });\n                    // Chain was already added, just switched\n                    setChainId(targetChainId);\n                    return true;\n                } catch (switchError) {\n                    // This error code indicates that the chain has not been added to MetaMask\n                    if (switchError.code === 4902) {\n                        // In a real app, you would add the chain to wallet here\n                        // For this MVP, just throw an error\n                        throw new Error(\"Chain not supported. Please add it to your wallet.\");\n                    }\n                    throw switchError;\n                }\n            }\n            // Mock implementation\n            console.log(\"Mock switching to chain ID: \".concat(targetChainId));\n            setChainId(targetChainId);\n            return true;\n        } catch (error) {\n            console.error(\"Chain switch error:\", error);\n            toast({\n                title: \"Network Switch Failed\",\n                description: (error === null || error === void 0 ? void 0 : error.message) || \"Could not switch network\",\n                variant: \"destructive\"\n            });\n            return false;\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(Web3Context.Provider, {\n        value: {\n            address,\n            isConnected,\n            connect,\n            disconnect,\n            signMessage,\n            chainId,\n            switchChain,\n            walletType\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/app/components/web3-provider.tsx\",\n        lineNumber: 295,\n        columnNumber: 5\n    }, this);\n}\n_s(Web3Provider, \"CSbH/PnY3J1AqwHS4W7SRvpkZi4=\", false, function() {\n    return [\n        _hooks_use_toast__WEBPACK_IMPORTED_MODULE_2__.useToast\n    ];\n});\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/web3-provider.tsx\n"));

/***/ })

});