---
description: 
globs: 
alwaysApply: true
---
You are an expert in TypeScript, Node.js, Next.js App Router, React, Shadcn UI, Radix UI, Tailwind CSS, and modern web development.  
This comprehensive guide outlines best practices, conventions, and standards for building robust, scalable, and maintainable web applications.


## Development Philosophy

- Write clean, maintainable, and scalable code.
- Follow SOLID principles and component-driven development.
- Prefer functional and declarative programming patterns over imperative.
- Emphasize type safety and static analysis (TypeScript strict mode).
- Plan before coding: use step-by-step planning, pseudocode, and document component architecture and data flow.
- Consider edge cases and error scenarios in all implementations.


## Core Tech Stack (2025)

- **Framework:** Next.js 15+ (App Router, Server Components, Server Actions)
- **Language:** TypeScript (strict mode)
- **Styling:** Tailwind CSS (utility-first, mobile-first, dark mode)
- **UI Components:** shadcn/ui, Radix UI (accessibility, composability)
- **State Management:** Zustand (primary), Redux Toolkit (legacy/complex only)
- **Authentication:** Auth.js (NextAuth) or Clerk (choose per project needs)
- **Database/ORM:** Drizzle ORM + Vercel Postgres (primary), Prisma + Supabase (advanced)
- **Forms & Validation:** React Hook Form + Zod
- **Image Handling:** Next.js `<Image>`, Cloudinary (advanced)
- **Notifications:** React Hot Toast or Sonner
- **Payments:** Stripe (if needed)
- **CMS:** Sanity (if needed)
- **i18n:** next-i18next
- **Testing:** Jest + React Testing Library, >80% coverage
- **Performance:** Optimize Web Vitals (LCP, CLS, FID), dynamic imports, Suspense
- **Edge-first:** Design for edge runtime, minimize cold starts
- **Accessibility:** Use shadcn/ui + Radix UI, follow a11y best practices
- **AI Integration:** Be ready for AI-powered features


## Code Style and Structure

- Use TypeScript for all code; enable strict mode.
- Prefer interfaces over types for object structures.
- Avoid enums; use objects/maps instead.
- Use functional components only (no classes).
- Use the `function` keyword for pure functions.
- Structure files: exported component, subcomponents, helpers, static content, types.
- Prefer named exports for components.
- Use tabs for indentation.
- Use single quotes for strings (except to avoid escaping).
- Omit semicolons unless required for disambiguation.
- Eliminate unused variables.
- Add space after keywords, before function parentheses, after commas, and around infix operators.
- Keep else statements on the same line as closing curly braces.
- Use curly braces for multi-line if statements.
- Limit line length to 80 characters.
- Use trailing commas in multiline object/array literals.
- No inline functions in JSX; use `useCallback`/`useMemo` for optimization.
- Use RO-RO (object as input/output) for complex functions.


## Naming Conventions

- **PascalCase:** Components, type definitions, interfaces.
- **camelCase:** Variables, functions, methods, hooks, properties, props.
- **kebab-case:** Directory and file names (e.g., components/auth-wizard, user-profile.tsx).
- **UPPERCASE:** Environment variables, constants, global configurations.
- **Prefixes:**
  - `handle*` for event handlers (handleClick, handleSubmit)
  - `is*`, `has*`, `can*` for booleans
  - `use*` for custom hooks
- Use complete words over abbreviations, except for: err, req, res, props, ref.


## Functions & Components

- Write short, single-purpose functions (<20 instructions).
- Name functions with a verb and a descriptive noun.
- Use default parameter values instead of null/undefined checks.
- Reduce function parameters using objects (RO-RO).
- Prefer immutability; use `readonly` and `as const` where possible.
- Extract reusable logic into custom hooks.
- Use React.memo and useCallback/useMemo for performance.
- Implement proper cleanup in useEffect hooks.
- Avoid inline function definitions in JSX.


## UI & Styling

- Use Shadcn UI and Radix UI for accessible, composable components.
- Tailwind CSS for all styling; utility-first, mobile-first, responsive.
- Implement dark mode using Tailwind or CSS variables.
- Ensure color contrast ratios meet accessibility standards.
- Maintain consistent spacing and use CSS variables for theming.


## Data Fetching & State

- Use Next.js App Router for all routing.
- Default to Server Components; use `use client` only when necessary (event listeners, browser APIs, small client-only components).
- Use Server Actions for mutations; avoid API routes when possible.
- Use Zustand for state management; Redux Toolkit only for legacy/complex cases.
- Use nuqs for URL search parameter state management.
- For forms, use React Hook Form + Zod for type-safe validation.


## Error Handling

- Use error boundaries to catch and handle errors gracefully.
- Log errors to external services (e.g., Sentry).
- Provide user-friendly fallback UIs.
- Always handle error parameters in callbacks and async functions.


## Accessibility (a11y)

- Use semantic HTML and accurate ARIA attributes.
- Ensure full keyboard navigation support.
- Manage focus order and visibility.
- Maintain accessible color contrast ratios.
- Follow a logical heading hierarchy.
- Make all interactive elements accessible.
- Provide clear and accessible error feedback.


## Security

- Sanitize all user input (DOMPurify for HTML).
- Use proper authentication and validation everywhere.


## Internationalization (i18n)

- Use next-i18next for translations and locale detection.
- Format numbers, dates, and currencies properly.
- Implement RTL support where needed.


## Testing

- Write thorough unit tests for all functions and components (Jest + React Testing Library).
- Use Arrange-Act-Assert for unit tests, Given-When-Then for acceptance.
- Mock external dependencies and API calls.
- Use integration tests for user workflows.
- Set up and tear down test environments for independence.
- Use snapshot testing selectively.
- Maintain >80% test coverage.


## Performance & Web Vitals

- Optimize for LCP, CLS, FID.
- Use dynamic imports for non-critical components.
- Wrap client components in Suspense with fallback.
- Optimize images (WebP, size data, lazy loading, Next.js `<Image>`).
- Design for edge runtime; minimize cold starts.


## AI Integration

- Be ready to integrate AI-powered features (autocomplete, performance optimization, etc.) as the ecosystem evolves.


## Documentation

- Use JSDoc for all public functions, classes, methods, and interfaces.
- Document architecture, data flow, and edge cases.
- Use clear markdown formatting, code blocks, and examples.